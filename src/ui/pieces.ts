import { DrawingState } from ".."
import { Piece, Position } from "../engine/State"
import { darkWood, lightWood, pieceSize } from "./board"

const pawnPath = [
  "M61.5943 32.4035",
  "C60.9349 27.5725 58.6923 25.4547 50.5 23",
  "C42.3077 25.4547 40.0651 27.5725 39.4057 32.4035",
  "C39.4985 38.9285 41.5219 40.7824 46.3396 42.9825",
  "C40.6233 44.443 37.9675 45.2817 36.6321 46.9006",
  "C38.1996 48.9239 39.6593 49.5767 42.6415 50.4269",
  "C42.4106 60.0529 41.1898 65.3632 37.5566 74.7193",
  "H35.2453",
  "V76.6784",
  "C28.0372 77.8887 26 80.9883 26 82.5556",
  "C26 84.1228 27.4815 86.7079 31.0849 87.6491",
  "L27.3868 90",
  "H50.3637",
  "H73.6132",
  "L69.9151 87.6491",
  "C73.5185 86.7079 75 84.1228 75 82.5556",
  "C75 80.9883 72.9628 77.8887 65.7547 76.6784",
  "V74.7193",
  "H63.4434",
  "C59.8102 65.3632 58.5894 60.0529 58.3585 50.4269",
  "C61.3407 49.5767 62.8004 48.9239 64.3679 46.9006",
  "C63.0325 45.2817 60.3767 44.443 54.6604 42.9825",
  "C59.4781 40.7824 61.5015 38.9285 61.5943 32.4035",
  "Z",
]

const knightPath = [
  "M60.5 26.5002",
  "C59.7129 24.4187 57.2568 23.989 57 24.0002",
  "C45.5 24.5002 41.5 25.5002 33.5 35.0002",
  "C28.2756 39.5002 27 61.5002 37.6297 74.4424",
  "H35.5037",
  "V76.437",
  "C28.8738 77.6693 27 80.8251 27 82.4208",
  "C27 84.0164 28.3627 86.6484 31.6771 87.6067",
  "L28.2756 90.0002",
  "H71.7244",
  "L68.3229 87.6067",
  "C71.6373 86.6484 73 84.0164 73 82.4208",
  "C73 80.8251 71.1262 77.6693 64.4963 76.437",
  "V74.4424",
  "H62.3703",
  "C67.5 69 50 51.5 50 46",
  "C52 48 59 51 61.5 49",
  "C62.5 50 65 52 67.5 53.5",
  "C68.5 52.5 70.5 49.5 71 48.5",
  "C70.7611 46.2807 62.3703 38 62.3703 33",
  "C61.6799 32.1818 60 32.0002 58 30.5002",
  "M60.5 26.5002",
  "C60.9095 27.583 57.53 29.1757 58 30.5002",
  "M60.5 26.5002",
  "L58 30.5002",
  "Z",
]

const bishopPath = [
  "M54.6604 42.9825",
  "C59.4781 40.7824 61.5 36.5 61.5943 32.4035",
  "C61 29.5 59.5 28 58 26.5",
  "C57.7391 26.33 55.7958 31.6636 55.5 31.5",
  "C54.9621 31.2025 54.6604 31 54 30.5",
  "C53.6359 30.3444 55.9051 25.1536 55.5 25",
  "C54.8243 24.7438 53.6496 23.8248 53 23.5",
  "C52 23 54 20 53 19",
  "C52 18 49 18 48 19",
  "C47 20 49 23 48 23.5",
  "C41.5418 25.6931 40.0037 28.0225 39.4057 32.4035",
  "C39.4985 38.9285 41.5219 40.7824 46.3396 42.9825",
  "C40.6233 44.443 37.9675 45.2817 36.6321 46.9006",
  "C38.1996 48.9239 39.6593 49.5767 42.6415 50.4269",
  "C42.4106 60.0529 41.1898 65.3632 37.5566 74.7193",
  "H35.2453",
  "V76.6784",
  "C28.0372 77.8887 26 80.9883 26 82.5556",
  "C26 84.1228 27.4815 86.7079 31.0849 87.6491",
  "L27.3868 90",
  "H50.3637",
  "H73.6132",
  "L69.9151 87.6491",
  "C73.5185 86.7079 75 84.1228 75 82.5556",
  "C75 80.9883 72.9628 77.8887 65.7547 76.6784",
  "V74.7193",
  "H63.4434",
  "C59.8102 65.3632 58.5894 60.0529 58.3585 50.4269",
  "C61.3407 49.5767 62.8004 48.9239 64.3679 46.9006",
  "C63.0325 45.2817 60.3767 44.443 54.6604 42.9825",
  "Z",
]

const towerPath = [
  "M54.2918 42.13",
  "C58.7231 39.89 60.5842 38.0025 60.6696 31.3592",
  "V24.8859",
  "H57",
  "V28.5",
  "H53",
  "V24.8859",
  "H47",
  "V28.5",
  "H43",
  "V24.8859",
  "H39.3304",
  "C39.3304 24.8859 39.315 28.2826 39.3304 31.3592",
  "C39.4158 38.0025 41.2769 39.89 45.7082 42.13",
  "C40.4504 43.617 38.0076 44.4709 36.7793 46.1192",
  "C38.2211 48.1792 39.5637 48.8438 42.3067 49.7094",
  "C42.0943 59.51 40.9714 64.9166 37.6297 74.4423",
  "H35.5037",
  "V76.4368",
  "C28.8738 77.6691 27 80.8249 27 82.4206",
  "C27 84.0163 28.3627 86.6482 31.6771 87.6065",
  "L28.2756 90",
  "H71.7244",
  "L68.3229 87.6065",
  "C71.6373 86.6482 73 84.0163 73 82.4206",
  "C73 80.8249 71.1262 77.6691 64.4963 76.4368",
  "V74.4423",
  "H62.3703",
  "C59.0286 64.9166 57.9057 59.51 57.6933 49.7094",
  "C60.4363 48.8438 61.7789 48.1792 63.2207 46.1192",
  "C61.9924 44.4709 59.5496 43.617 54.2918 42.13",
  "Z",
]

const queenPath = [
  "M54.2918 42.13",
  "C58.7231 39.89 60.5842 38.0025 60.6696 31.3592",
  "C60.3083 28.4298 57.6933 24.8859 57.6933 24.8859",
  "C56.5012 24 53.6844 24 50.3397 24",
  "C46.9951 24 43.4988 24 42.3067 24.8859",
  "C42.3067 24.8859 39.6917 28.4298 39.3304 31.3592",
  "C39.4158 38.0025 41.2769 39.89 45.7082 42.13",
  "C40.4504 43.617 38.0076 44.4709 36.7793 46.1192",
  "C38.2211 48.1792 39.5637 48.8438 42.3067 49.7094",
  "C42.0943 59.51 40.9714 64.9166 37.6297 74.4423",
  "H35.5037",
  "V76.4368",
  "C28.8738 77.6691 27 80.8249 27 82.4206",
  "C27 84.0163 28.3627 86.6482 31.6771 87.6065",
  "L28.2756 90",
  "H71.7244",
  "L68.3229 87.6065",
  "C71.6373 86.6482 73 84.0163 73 82.4206",
  "C73 80.8249 71.1262 77.6691 64.4963 76.4368",
  "V74.4423H62.3703",
  "C59.0286 64.9166 57.9057 59.51 57.6933 49.7094",
  "C60.4363 48.8438 61.7789 48.1792 63.2207 46.1192",
  "C61.9924 44.4709 59.5496 43.617 54.2918 42.13",
  "Z",
  "M52 14",
  "C51 14 51 17.5 50 17.5",
  "C49 17.5 49 14 48 14",
  "C47 14 47 17 46 17",
  "C45 17 42.5246 14.531 43 15",
  "C43.5 16.4249 44.5 21.5 44.5 21.5",
  "C46.5 21.5 54 21.5 55.5 21.5",
  "C55.5 21.5 56.4616 16.4249 57 15",
  "C57.6743 14.3348 55 17 54 17",
  "C53 17 53 14 52 14",
  "Z",
]

const kingPath = [
  "M54.2918 42.13",
  "C58.7231 39.89 60.5842 38.0025 60.6696 31.3592",
  "C60.3083 28.4298 57.6933 24.8859 57.6933 24.8859",
  "C56.5012 24 53.6844 24 50.3397 24",
  "C46.9951 24 43.4988 24 42.3067 24.8859",
  "C42.3067 24.8859 39.6917 28.4298 39.3304 31.3592",
  "C39.4158 38.0025 41.2769 39.89 45.7082 42.13",
  "C40.4504 43.617 38.0076 44.4709 36.7793 46.1192",
  "C38.2211 48.1792 39.5637 48.8438 42.3067 49.7094",
  "C42.0943 59.51 40.9714 64.9166 37.6297 74.4423",
  "H35.5037",
  "V76.4368",
  "C28.8738 77.6691 27 80.8249 27 82.4206",
  "C27 84.0162 28.3627 86.6482 31.6771 87.6065",
  "L28.2756 90",
  "H71.7244",
  "L68.3229 87.6065",
  "C71.6373 86.6482 73 84.0162 73 82.4206",
  "C73 80.8249 71.1262 77.6691 64.4963 76.4368",
  "V74.4423",
  "H62.3703",
  "C59.0286 64.9166 57.9057 59.51 57.6933 49.7094",
  "C60.4363 48.8438 61.7789 48.1792 63.2207 46.1192",
  "C61.9924 44.4709 59.5496 43.617 54.2918 42.13",
  "Z",
  "M52.1291 8.50351",
  "C51.4486 7.83216 48.4635 7.83217 47.783 8.50351",
  "C47.1024 9.17484 47.783 12.7911 47.783 12.7911",
  "C47.783 12.7911 44.1173 12.1197 43.4368 12.7911",
  "C42.7563 13.4624 42.9614 16.6096 43.4368 17.0786",
  "C43.9122 17.5476 47.783 17.0786 47.783 17.0786",
  "C47.783 17.0786 46.7513 20.4782 47.783 21.3662",
  "C48.8146 22.2542 51.4486 22.1673 52.1291 21.3662",
  "C52.8096 20.5651 52.1291 17.0786 52.1291 17.0786",
  "C52.1291 17.0786 55.8009 17.7438 56.4752 17.0786",
  "C57.1495 16.4134 57.1998 13.5059 56.4752 12.7911",
  "C55.7506 12.0762 52.1291 12.7911 52.1291 12.7911",
  "C52.1291 12.7911 52.8096 9.17486 52.1291 8.50351",
  "Z",
]

export const piecePaths = {
  "♟": { path: pawnPath, color: "black" },
  "♜": { path: towerPath, color: "black" },
  "♞": { path: knightPath, color: "black" },
  "♝": { path: bishopPath, color: "black" },
  "♛": { path: queenPath, color: "black" },
  "♚": { path: kingPath, color: "black" },
  "♙": { path: pawnPath, color: "white" },
  "♖": { path: towerPath, color: "white" },
  "♘": { path: knightPath, color: "white" },
  "♗": { path: bishopPath, color: "white" },
  "♕": { path: queenPath, color: "white" },
  "♔": { path: kingPath, color: "white" },
} as const

export async function drawPiece(
  ctx: CanvasRenderingContext2D,
  path: string[],
  color: "black" | "white"
) {
  let x = 0
  let y = 0

  for (const p of path) {
    if (p.startsWith("M")) {
      // Move
      ;[x, y] = p
        .substring(1)
        .split(" ")
        .map(Number)
        .map((v) => (v * pieceSize) / 100)
      ctx.moveTo(x, y)
    }
    if (p.startsWith("C")) {
      // Curve
      const [x1, y1, x2, y2, x3, y3] = p
        .substring(1)
        .split(" ")
        .map(Number)
        .map((v) => (v * pieceSize) / 100)
      ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3)
      x = x3
      y = y3
    }
    if (p.startsWith("H")) {
      // Horizontal
      ;[x] = p
        .substring(1)
        .split(" ")
        .map(Number)
        .map((v) => (v * pieceSize) / 100)
      ctx.lineTo(x, y)
    }
    if (p.startsWith("V")) {
      // Vertical
      ;[y] = p
        .substring(1)
        .split(" ")
        .map(Number)
        .map((v) => (v * pieceSize) / 100)
      ctx.lineTo(x, y)
    }
    if (p.startsWith("Z")) {
      if (color === "black") {
        ctx.strokeStyle = "black"
        ctx.lineWidth = 0
        ctx.fillStyle = "black"
      } else {
        ctx.strokeStyle = "#888888"
        ctx.lineWidth = 0
        ctx.fillStyle = "white"
      }
      ctx.stroke()
      ctx.fill()
      ctx.closePath()
      ctx.beginPath()
    }
  }
  return
}

export function renderPiece(
  drawingState: DrawingState,
  piece: Piece,
  pos: Position
) {
  const texture = drawingState.textures.pieces[piece]
  if (!texture) {
    throw new Error(`No texture for ${piece}`)
  }

  drawingState.ctx.drawImage(
    texture,
    pos.x * pieceSize,
    pos.y * pieceSize,
    pieceSize,
    pieceSize
  )
}
